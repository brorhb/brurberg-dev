<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Bror Brurberg</title><description>Just another remote app developer</description><link>https://brurberg.dev</link><language>en</language><lastBuildDate>Mon, 9 Mar 2020 07:32:28 +0100</lastBuildDate><pubDate>Mon, 9 Mar 2020 07:32:28 +0100</pubDate><ttl>250</ttl><atom:link href="https://brurberg.dev/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://brurberg.dev/projects/speedy</guid><title>Speedy - A watch speedgauge</title><description></description><link>https://brurberg.dev/projects/speedy</link><pubDate>Mon, 9 Mar 2020 07:30:00 +0100</pubDate><content:encoded><![CDATA[<h1>Speedy - A watch speedgauge</h1><p>Saturday I woke up, and started my weekend routine. I was watching my regular sports and programming youtube channels. Suddenly it hit me: I should create a app today. And so I did.</p><p>Speedy is a very simple Apple Watch app, and it is just an Apple Watch app, standalone, it does not need a phone ü§™ I'm sure you get it. I've been dabbing into SwiftUI, and I think that is my thing in 2020. But I wanted to something else, try out some new API and use only local data üòÅ</p><p>Speedy uses core location data to fetch location data for the watch, and it shows you your speed and the direction you are heading. Again pretty simple. It is free on the app store, and if you feel like looking at 5hours worth of work, feel free to check the <a href="https://github.com/brorhb/speedy">repository</a></p><p>Check it out in the <a href="https://apps.apple.com/no/app/speedy-watch-speedgauge/id1501965392?l=nb">AppStore</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://brurberg.dev/projects/speedy_privacy</guid><title>Privacy policy for Speedy</title><description></description><link>https://brurberg.dev/projects/speedy_privacy</link><pubDate>Sat, 7 Mar 2020 18:23:00 +0100</pubDate><content:encoded><![CDATA[<h2>Privacy Policy</h2><p>Bror Brurberg built the Speedy - Watch speedgauge app as a Free app. This SERVICE is provided by Bror Brurberg at no cost and is intended for use as is.</p><p>This page is used to inform visitors regarding my policies with the collection, use, and disclosure of Personal Information if anyone decided to use my Service.</p><p>If you choose to use my Service, then you agree to the collection and use of information in relation to this policy. The Personal Information that I collect is used for providing and improving the Service. I will not use or share your information with anyone except as described in this Privacy Policy.</p><p>The terms used in this Privacy Policy have the same meanings as in our Terms and Conditions, which is accessible at Speedy - Watch speedgauge unless otherwise defined in this Privacy Policy.</p><p><strong>Information Collection and Use</strong></p><p>For a better experience, while using our Service, I may require you to provide us with certain personally identifiable information, including but not limited to none. The information that I request will be retained on your device and is not collected by me in any way.</p><p>The app does use third party services that may collect information used to identify you.</p><p>Link to privacy policy of third party service providers used by the app</p><p><strong>Log Data</strong></p><p>I want to inform you that whenever you use my Service, in a case of an error in the app I collect data and information (through third party products) on your phone called Log Data. This Log Data may include information such as your device Internet Protocol (‚ÄúIP‚Äù) address, device name, operating system version, the configuration of the app when utilizing my Service, the time and date of your use of the Service, and other statistics.</p><p><strong>Cookies</strong></p><p>Cookies are files with a small amount of data that are commonly used as anonymous unique identifiers. These are sent to your browser from the websites that you visit and are stored on your device's internal memory.</p><p>This Service does not use these ‚Äúcookies‚Äù explicitly. However, the app may use third party code and libraries that use ‚Äúcookies‚Äù to collect information and improve their services. You have the option to either accept or refuse these cookies and know when a cookie is being sent to your device. If you choose to refuse our cookies, you may not be able to use some portions of this Service.</p><p><strong>Service Providers</strong></p><p>I may employ third-party companies and individuals due to the following reasons:</p><ul><li>To facilitate our Service;</li><li>To provide the Service on our behalf;</li><li>To perform Service-related services; or</li><li>To assist us in analyzing how our Service is used.</li></ul><p>I want to inform users of this Service that these third parties have access to your Personal Information. The reason is to perform the tasks assigned to them on our behalf. However, they are obligated not to disclose or use the information for any other purpose.</p><p><strong>Security</strong></p><p>I value your trust in providing us your Personal Information, thus we are striving to use commercially acceptable means of protecting it. But remember that no method of transmission over the internet, or method of electronic storage is 100% secure and reliable, and I cannot guarantee its absolute security.</p><p><strong>Links to Other Sites</strong></p><p>This Service may contain links to other sites. If you click on a third-party link, you will be directed to that site. Note that these external sites are not operated by me. Therefore, I strongly advise you to review the Privacy Policy of these websites. I have no control over and assume no responsibility for the content, privacy policies, or practices of any third-party sites or services.</p><p><strong>Children‚Äôs Privacy</strong></p><p>These Services do not address anyone under the age of 13. I do not knowingly collect personally identifiable information from children under 13. In the case I discover that a child under 13 has provided me with personal information, I immediately delete this from our servers. If you are a parent or guardian and you are aware that your child has provided us with personal information, please contact me so that I will be able to do necessary actions.</p><p><strong>Changes to This Privacy Policy</strong></p><p>I may update our Privacy Policy from time to time. Thus, you are advised to review this page periodically for any changes. I will notify you of any changes by posting the new Privacy Policy on this page. These changes are effective immediately after they are posted on this page.</p><p><strong>Contact Us</strong></p><p>If you have any questions or suggestions about my Privacy Policy, do not hesitate to contact me at brorbrurberg@me.com.</p><p>This privacy policy page was created at <a href="https://privacypolicytemplate.net">privacypolicytemplate.net</a> and modified/generated by <a href="https://app-privacy-policy-generator.firebaseapp.com/">App Privacy Policy Generator</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://brurberg.dev/articles/20200223</guid><title>Flutter 1 year later</title><description></description><link>https://brurberg.dev/articles/20200223</link><pubDate>Sun, 23 Feb 2020 12:30:00 +0100</pubDate><content:encoded><![CDATA[<h1>Battle tested Flutter</h1><p>About a year ago I wrote an article <a href="https://www.brurberg.dev/articles/flutter%20‚Äî%20i%20don‚Äôt%20hate%20it/">Flutter I don't hate it</a>, and now after a year I would like to revisit that article.</p><p>2019-01-29 I wrote that article, and during the spring of 2019 I started to work more with Flutter and Dart, and later that summer I started to work more or less full time within the Flutter eco-system. I've put 2 apps into production, to later merge them together again. I've implemented crash analytics and have accumulated real world data from real world users.</p><p>So what do I work with? If you are new to my blogging, you might not know that I'm the only developer working on Chemical Manager for mobile. That is an application I work on for EcoOnline. If you would like to read more, you can read <a href="https://www.brurberg.dev/articles/ecoonline%20mobile%20apps%2020/">this</a>.</p><p>Now, what do I think of Flutter after a year? I'll have to say, most of my inital impressions still stands üòÖ Dart have grown on me more over the time. I started out explaining my feelings for dart with this meme: <img src="https://www.brurberg.dev/images/flutter-i-dont-hate-it/fry.jpeg" alt="Not home, but feel like it"/> But now it feels more and more like home üòÖ I'm coming from JavaScript, and I guess that language will always stay close to my heart with all it quirks and "features". Dart on the other hand is... boring(?) not in a bad way tho. It feels like an iteration on JS, stripped down to the basics, added types and added some more safety features to the language üëÄ</p><p>The team working on Dart have also recently added extentions to the language, which reminds me of Swift (Another language I quite like) enabling you to extend classes at will! If you want some extra functionality on the <code>String</code> class you can just extend it! Just look at what Luke Pighetti does in this <a href="https://twitter.com/luke_pighetti/status/1228392216302964736?s=21">tweet</a></p><p>I haven't gotten around to do anything with extensions at work yet. Simply because I haven't found any good use-case for it yet üôà but it is cool to know I can extend stuff if I need to ‚úåüèº</p><p>But everything is not all great, and my biggest gripe probably is the greatest gift üéÅ to react native die hard fans! 3rd party packages... there are a lot of them, and a lot of them is quite good! But sometimes you find wired bugs in the most popular packages, and the developer seems to not care. In JS it is easier to just start a new search for another package that serves your purpose. But we don't have that many packages in flutter just yet, so you need to either report a bug to the developer, fork the repo and fix the issue or just develop your own implementation of that package.</p><p>I have done that once. I needed a package to download files, keep a reference to those files, and keep track of the download queue and the state of each item. I first went with flutter_downloader and got it to work. Buuuut I had some weird bugs, and figured it was something with the SQLite implantation on the native side of that plugin. I tried to fix it, but after a while I realized it would be way easier to just develop my own package. So I combined the power of SQFlite and Dio and created my own package for downloading stuff and provide custom headers and everything purely in dart! It was a nice feeling when I got everything to work, and it is nice to know that this runs on over 10k devices out there. But had this been react native I bet that I would not been in a situation where I needed to write my own implantation of what I think of as a pretty trivial plugin that downloads stuff from a URL and keeps track of said stuff üòÖ</p><p>But to conclude this post. I still like to work with flutter and dart üéØ it is not new and shiny anymore, but it is now a tool I've become pretty effective with ü§ì I hope it will continue to grow (it has passed react native in the number of stars ‚≠êÔ∏è on GitHub üêô). And even if it dies at some point, I feel like my knowledge I've acquired by working with this framework is easily transferable to SwiftUI. After a year with flutter I've become a better developer, and I've become better at working with reactive frameworks! So... thanks I guess to the flutter team‚úåüèº</p>]]></content:encoded></item><item><guid isPermaLink="true">https://brurberg.dev/projects/wishywashy</guid><title>Wishywashy ‚Äî independent app</title><description></description><link>https://brurberg.dev/projects/wishywashy</link><pubDate>Thu, 20 Feb 2020 00:00:00 +0100</pubDate><content:encoded><![CDATA[<h1>Wishywashy ‚Äî independent app</h1><p>Over the last month I‚Äôve been working on a little pet project. That pet project is called <a href="https://apps.apple.com/no/app/wishywashy/id1497023679?l=nb">‚ÄúWishywashy‚Äù</a>.</p><p>So what is <a href="https://apps.apple.com/no/app/wishywashy/id1497023679?l=nb">Wishywashy</a>? It‚Äôs an app (duhüòÖ) for helping me a couple of times a year. More specifically at gift giving occasions. For example; come Christmas, a close relative will ask: ‚Äúsoooo, Bror what do you want for Christmas üéÑ ?‚Äù, and more often than not, my answer is ‚ÄúI don‚Äôt know‚Äù. And again more often then not I do actually know, but I struggle to remember it üòì</p><p>So I figured I wanted to play around with SwiftUI and Firebase. And here we are ü§™ if you are reading this you can go download my app on the AppStore, and start organizing your wishlist, share it and look at others wishes ü§ì</p><p>This is my first app released from me as a individual and not created by me for a company! It feels kind of scary, and I found it valuable to go trough the app launch process again, and with new aspects I haven‚Äôt worked with before.</p><p>Talking about these new aspects, you might wonder what those are. Monetization‚Ä¶ that is the word! Firebase have a cost to it after a curtain point. And it would be awesome if this app could pay for itself, so I needed to monetize it. It is hard to find a way to make money, and everything feels wired and like a compromise. I think I landed on the best compromise I could; Ads and a way for the user to pay to remove said ads üí∏.</p><p>I don‚Äôt like ads, I run ad-blockers and all sorts of software and settings to block tracking. So when setting up my ads I first tried to find the ad platform Apple had called iAd. I have heard iAd is pretty bad, but I want the least creepy ads possible üßê. I quickly figured out that iAds have been discontinued, and I had to settle for Google Admob. Really because this was the only other ads framework I knew about. But I do not like that I have to use Admob, but I at least have a lot of options on that platform! So, for my settings on Admob, I‚Äôve tweaked them to the least creepy options I can üéâ.</p><p>And that brings me to the next topic that is privacy releated. Firebase, yet another Google product. I‚Äôve of course heard about Firebase before, and a friend of mine have had some good experiences working with it. Firebase also have pretty good documentation for Swift so I figured I should go for that platform for my storage.</p><p>When setting up authentication with Firebase you have a lot of options; email/password combination and the possibility to use a lot of 3rd party options like GitHub, Google, Apple and more‚Ä¶ Since I like to keep privacy to a max, and I‚Äôm only planning to release this app on iOS, I wanted to just use ‚ÄúSign in with Apple‚Äù, and there the authentication part was done. Apple Sign-in allows the user to withold their email and give me just a address that forward to their correct email, but I don‚Äôt know their real email üòä That is perfect for me! The less I know, the better! When the user authenticates with Firebase I create documents for the user in my Firebase Database, allowing them to create new wishes, edit and delete them.</p><p>Surprisingly the development of the app, is what took the least amount of time. I tought this would take more time, since I don‚Äôt have too much experience with that framework yet (or native development in general). Luckily SwiftUI is another reactive framework, and have a lot of familiarites with React Native and Flutter, which I‚Äôve been working professionally with in various degree. That knowledge transfered pretty nicely over to SwiftUI, and the core of the app was built in a couple of weekends and over some evenings after work.</p><p>And then we are over to the release proccess. If you have ever launched something to the app store you know there are a lot of fall pits there. You need to check all the right boxes, and cross your fingers that the human reviewing your app have the same understanding of things that you do.</p><p>Example of this: My first try to release this app, of course ended in a rejection from the app store. My app triggered the rule ‚Äú1.1 Legal: Privacy ‚Äî Data Collection and Storage‚Äù. The app gives you the ability to login, create a list and share it. But Apple tought that you should be able to use the app even without logging in, so I needed to rethink a lot. I‚Äôve landed on CoreData and if you want to use the app without logging in, you can now do that. The list will be stored locally until you log in, then I sync it.</p><p>There was also a lot of more work to do with my app than any other app I‚Äôve published for a company. This app have In-app purchases, so you need to do a lot of paperwork (Apple makes this pretty easy to do, but it is still something you have to do).</p><p>The takeaway for this project for me is. The 80/20 rule applies to this to‚Ä¶ I should have predicted this tho. Actually developing the app was 20% of the time I‚Äôve been working on this project. The other 80% is managment, paperwork, batteling the AppStore and AdMob. It have been a learning experience tho, and I‚Äôve learned a lot from it. Just not what I expected üòÖI expected to use more time on SwiftUI and having a harder time with that.</p><p>If you wanna test it out, or this app sounds like something you want, check it out on the <a href="https://apps.apple.com/no/app/wishywashy/id1497023679?l=nb">AppStore</a></p><p>On another note; I‚Äôm also working on the <a href="https://www.hackingwithswift.com/100/swiftui">#100DaysOfSwiftUI</a> challenge, and can say that this is worth your time doing if you want to learn SwiftUI. It is max 1 hour a day, for 100 days, gradually diving deeper into Swift and SwiftUI, have fun with that!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://brurberg.dev/articles/20200219</guid><title>Remote worker part 2</title><description></description><link>https://brurberg.dev/articles/20200219</link><pubDate>Wed, 19 Feb 2020 00:00:00 +0100</pubDate><content:encoded><![CDATA[<h1>Remote worker part 2</h1><p>Last september had a pretty big change to how I work. I moved to <a href="https://en.wikipedia.org/wiki/Oppdal">Oppdal</a>, but I kept my job in <a href="https://en.wikipedia.org/wiki/T√∏nsberg">T√∏nsberg</a>. T√∏nsberg is a 7hour train ride away and there is not too many trains that are conveinent for that travel, a couple of trains a day. There are more trains, but then you'll be looking at 12+hours üòÖ What I'm trying to say is: I'm pretty remote for the main office.</p><p><a href="https://www.brurberg.dev/articles/working%20remotely%20part%201/">I've written about the life of a remote worker earlier</a> (from my perspective), and I would like to revisit the topic since more time has passed ‚è≥. And not much have changed. The perks are still perks, and still I don't have a lot of negatives coming directly from working remote. But what I want to write about today is not really how life is for a remote developer, but more about what impression others might get of you.</p><p>From time to time, when I get introduced to new people the question comes up pretty quickly: "So what do you do?", my imidiate reply is: "Oh! I'm a app developer" that usualy gets a quick followup question "Cool! Where are you working?" and the answer is "I work for a company in T√∏nsberg, but I have an office here üòä". The polite work converstaion usually ends there, but I feel like I can see the questions build up in the other person: "How does that work?", "How can you get stuff done by your self?", "He got no supervision?".</p><p>I bet most of those questions comes from my own imagination üí≠, and I think those questions rise in my head because I don't know any other remote developers. I know about people having their own businesses, but that feels like something else. They travel out to a location to solve a problem for a customer. I think my toughts come from what I understand is norwegian working culture: "You need a manager that can see what you do".</p><p>But do you? Should't eveything come down to what you manage to deliver? Do you get your task done? Are you reachable for collabrative work? I think it should. I know with myself that I deliver at work. I hack away at my tasks, I come up with different solutions, test them and then does final implementation of them. And my manager is happy with the work I do. So why can't this be more normal in Norway?</p><p>I think it comes down to a couple of points. I think some managers are afraid of a few myths. A common belife (to my knowledge) is that remote workers want's to "work from the beach" or another equalent of that. In my position, the answer is no. I want to work from a controlled enviroment, and I want to be as effective at work as possible. I'm most effective from an office, that I can go to every morning, sit down and do my work. I want to work remote, so that I can work on projects I'm passioinate about for a company with a vision I can stand by. But I want to live close to mountains and nature. Developer jobs in Norway seems to be in bigger cities, where what I want from a place to live don't match up. By working remote, I can get both; A job I'm passionate about, and really want to do my best at. And when I'm off work I can go skiing (cross-country) ‚õ∑, snowboarding üèÇ, fishing üé£, hiking ü•æ, golfing üèåÔ∏è‚Äç‚ôÇÔ∏è.</p><p>By being able to do that, I belive I can be more effective at work, because I feel happy about my life outside of work. When I lived in a city, I was not able to be as much outside as I'm now. My city life was pretty much: Work -&gt; Workout (This might include golf or discgolf) -&gt; Netflix (or something like it) -&gt; Sleep. Although I could go golfing or discgolfing (both are hobbies I'm pretty passionate about) I could only do around 6 months. The rest of the year would be pretty misserable. Now I'm able to utilize the whole year much better, doing what I love for each season of the year. Resulting in improved life quality.</p><p>Another myth I think a lot of managers out there think; "I need my team close so I can quickly summon them". Now we use tool like Skype, Teams, Slack ect. Do you really need them to be inside the same room? Is is not an option of message them or call them is something urgent comes up? I mean, I sit at my computer for 8h. As a remote worker I work full working days. And I work during core business hours. The company I work at have set a range of hours that they classify as "Core business hours". During that time I'm reachable if my slack status don't say otherwise ("In a meeting"). If you send an email, I'll see it, if you message me, I'll see that too. If you call I'll pick it up expecting something urgent. If you have a remote worker in your timezone, just establish something like core hours if you feel like you need it. In other timezones that might be difficult, but you can work something out.</p><p>The last myth I'm going to write about is: "If workers work from home, they'll be distracted by chores at home". I feel this is more of a self reflection question. Do you feel like that when you work from home? I bet your remote worker want to do their job, and will not do chores at home instead. Or if they start a dishwasher, that should not take to much time. How much time to workers in an normal office situation spend at the wateringhole (coffeemachine)? My manager was not afraid about this with me. But we did include 1on1 conversations that we have every 14 days. They are unformal and we chitchat and talk some about what I'm doing and what I've done since last time. üëÄ During these conversations we can talk about stuff like that, if my manager feels like I'm slacking of, or if I feel like I don't have enough to do üòä Only the latter have happend, I did run out of bugs, and my mind was empty for new ideas to try. We could quickly resolve this, by notifing the product manager that could pull something new out of their backlog.</p><p>Also I'm not working from home. I have an office outside of the house. You should help your remote employee to get the same üòÅ That way they get away from their home. And it really helps the work life balance. When I leave my office I'm done for the day (usually), and when I get into the office I'm at work. If a office outside of the home is impossible, you as a worker should create your own office. And work should only stay in that office. This will help you achive the same from your home ‚úåÔ∏è</p><p>So to conclude this post. I wish that remote working will be more normal going forward. There are a lot of benefits for both parts of that deal. For the company; they get a happy worker that is strongly motivated to deliver good work because they want to stay in their current work/life situation. For the worker, you can work at a company you want to work for, and also live a life you want to live, where you want to live it üéâ But not take my word for it, you can read what <a href="https://cloudblogs.microsoft.com/industry-blog/en-gb/financial-services/2017/11/30/striking-the-right-balance-for-successful-remote-working/">Microsoft thinks about it too</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://brurberg.dev/articles/20200213</guid><title>This website is written in Swift</title><description></description><link>https://brurberg.dev/articles/20200213</link><pubDate>Thu, 13 Feb 2020 00:00:00 +0100</pubDate><content:encoded><![CDATA[<h1>This website is written in Swift</h1><p>‚ÄúYeah right‚Äù you might think, I can click cmd + alt + i and see that this is just a bunch of HTML files. And yes you are right. This site consists of several HTML files and css (no Javascript!). And to write this website I used.... Xcode.üíÅ‚Äç‚ôÇÔ∏è</p><p>The Swift community is awesome, and people do all sorts of exciting stuff! A big influencer and personality in this community is <a href="https://www.swiftbysundell.com/">John Sundell</a>. He have also created a full suite of tools to help you create a static sites like this one with swift üòç</p><p><a href="https://github.com/JohnSundell/Publish">This is the tool</a> responsible for this. It caused me some frustration since it‚Äôs not documented too well. I will not expand in detail how I built my site, but I will give you a link to my <a href="https://github.com/brorhb/brurberg-dev">repo</a> so you can have a little peak for your self üôà</p>]]></content:encoded></item><item><guid isPermaLink="true">https://brurberg.dev/articles/Guess%20the%20hex</guid><title>Guess the hex</title><description>A description of my first post.</description><link>https://brurberg.dev/articles/Guess%20the%20hex</link><pubDate>Mon, 16 Dec 2019 00:00:00 +0100</pubDate><content:encoded><![CDATA[<h1>Guess the hex</h1><p>A couple of days ago, I stumbled over this <a href="https://twitter.com/guamhat/status/1205982293787103234?s=21">tweet</a>, and I could not stop thinking about it. Soooooo, during lunch today I started to mock it up using Flutter üíô</p><p>So after working on it for 30min during lunch ü•ó and a couple of hours when I got home, this is what I got üòÖ</p><img src="https://cdn-images-1.medium.com/max/2048/1*OSW5yNYyRwXZICiym3ctjw.png"/><p>I was a fun little project, and might be the closest I‚Äôve done to ‚Äúspeed-coding‚Äù, but instead of making an interesting UI like those speed-coders do, I tried to make some logic to go with my simple UI ü§ì I was a fun challenge, and I got to work with things I usually don‚Äôt work with, I usually don‚Äôt work with colors, especially in this way üé®</p><p>So to the code! The logic I fairly simpel. I needed a GameState and I like to work with the <a href="https://pub.dev/packages/provider">Provider package</a> üì¶ so I went with that package, since I tried to do this quick. I also needed streams in this app, so I just added <a href="https://pub.dev/packages/rxdart">RxDart</a> right away. So my main state will be held in the GameState class with a ChangeNotifier, but since I want the win state and error state to be easier to listen to, I made those parts as streams. I‚Äôm sure there is a more effective way, but hey ‚Äî this is me trying new stuff üëÄ</p><p>So what do I have in my state holder class? (I won‚Äôt post the whole thing, just pseudo code).</p><script src="https://gist.github.com/brorhb/262fdbcf2f141a2caf37e51a3b351ac3.js" charset="utf-8"></script><p>This is the engine that makes this app work üòÖ It‚Äôs not much, but it is enough.</p><p>But‚Ä¶ I have one problem with Provider. I have not found a good way to listen for a change, and then spawn a SnackBar og AlertDialog. That is why I added some streams to this mess üòÅ With the streams, I can set up something like this:</p><script src="https://gist.github.com/brorhb/fcc2a8dcee89d9ca5e1b64b3cbb24357.js" charset="utf-8"></script><p>I‚Äôm sure there is another solution to the Future.delayed(Duration.zero, () {}); hack, but it works üòÖ I haven't combined ChangeNotifier with streams like this before, but now I can come up with a couple of use-cases in my productions app üòÅ</p><p>Today I also learned about CIEDE2000 as a way to calculate the distance between two colors. Of course I did not do this myself, but I wanted to know a bit of how it works, and I was pleasantly surprised that there was a Dart package for this (uploaded 9.dec 2019! Just my luck üéÖ) called <a href="https://pub.dev/packages/delta_e">delta_e</a>!</p><p>I also had to create an extension to Color, so I could take a string and try to create a color from it credit to this <a href="https://stackoverflow.com/questions/50081213/how-do-i-use-hexadecimal-color-strings-in-flutter">post</a> for explaining how to create a color from hex and visa versa. I just added a Exception to it if the input is totally invalid and some generic error‚Ä¶</p><script src="https://gist.github.com/brorhb/8749ff9284567131960e7642e3dd7c0e.js" charset="utf-8"></script><p>This was a short one, but I had fun writing this app, and I actually learned something I can take with me into my production apps. I think this is why playing and having fun with something is important to improve üòÅ I hope you got something out of reading this, maybe you want to create this app too? üëÄüé®</p>]]></content:encoded></item><item><guid isPermaLink="true">https://brurberg.dev/articles/Make%20it%20work%20make%20it%20right%20make%20it%20fast</guid><title>‚ÄúMake it work, make it right, make it fast‚Äù</title><description>A description of my first post.</description><link>https://brurberg.dev/articles/Make%20it%20work%20make%20it%20right%20make%20it%20fast</link><pubDate>Fri, 22 Nov 2019 00:00:00 +0100</pubDate><content:encoded><![CDATA[<h1>‚ÄúMake it work, make it right, make it fast‚Äù</h1><p>The title, is a phrase my mentor told me. And to be honest at the time, I did not think to much about it. I was like: ‚ÄúYeah, that makes sense‚Ä¶ (I guessüí≠)‚Äù. But the other day I started to think more about it, and realised how it had manifested it self during the last couple of months.</p><p>As stated in this <a href="https://medium.com/@brorbrurberg/ecoonline-mobile-apps-2-0-7b0b8d9055d9">post</a>, I recreated a rather big app in Flutter and released it to our customers. At that point, it workedüéâ! And that was the goal of it, It should work for our customers, and provide a nice experience. But I was kind of pressed on time (pressure mostly applied by meüòÖ), and the focus were to only make it work.</p><p>After the initial release, I have dedicated myself to release an update every 2 weeks. Be it new features or just fixes and performance updates. So, since I can‚Äôt always spit out new features, I get time to fix issues, tweak code, be all nitty gritty üòÅ</p><p>I quickly realized; In my rush to release, I did not care to much about using compute methods, that is available in Flutter. With the compute function, you can move a task to a new <a href="https://api.flutter.dev/flutter/dart-isolate/Isolate-class.html">Isolate</a>. To shortly explain what happens when you do that: You move a task to a separate thread, with its own memory. By doing this, you can move heavy calculations away from your main thread. This is important beacuse, <a href="https://www.youtube.com/watch?v=vl_AaCgudcY&feature=emb_logo@">Dart is a single-threaded language</a> and if you clog up the main thread, you will freeze the UI, and the user will notice that thinking you app is slow.</p><p>So I started to time a lot of methods, to figure out if something should be done on a seperate thread.</p><script src="https://gist.github.com/brorhb/74c876d39be0b8c90de33863ea0c866b.js" charset="utf-8"></script><p>And like most of you know, the goal with Flutter is to keep a high refresh rate. And try to keep it above 60FPS. That means you have (1000ms / 60frames) around 16,666666667ms/frame. So if your calculation takes more than 16ms you run the risk of stutters in you app, since this happens in the same place as where you run your UI code.</p><p>This is the making it right part. I think by moving heavy manipulations of lists and other costly calculations into compute methods, making the life of the main thread easier.</p><p>This is a good talk about why that is a good thing üòÅ The talk focuses on the web, but I found it really useful non the less.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/7Rrv9qFMWNM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>And now‚Ä¶ Making it fast. I can‚Äôt give you a whole lot of tips here, since a lot comes down to know the tool you are using, in my case: Dart.</p><p>But I do have some tricks that helped me a lot! Like any application, my apps use lists of data. And like you need to do in a lot of lists, you need to look up that information.</p><script src="https://gist.github.com/brorhb/bbc0e66e7ee99eeaec1576e203fc3014.js" charset="utf-8"></script><p>The example shows how I switched from using list of item, to a map with key/value pair of item.id as key, and the item as the value. In some cases this can yield huge performance gains. But, like I said: A lot comes down to knowing your tool. In Dart, you should make yourself very familiar with all the methods you can run on a Iterable. Methods like: map, fold and reduce can help you a lot üòÅ</p>]]></content:encoded></item><item><guid isPermaLink="true">https://brurberg.dev/articles/UI%20Testing</guid><title>UI Testing</title><description>A description of my first post.</description><link>https://brurberg.dev/articles/UI%20Testing</link><pubDate>Wed, 6 Nov 2019 00:00:00 +0100</pubDate><content:encoded><![CDATA[<h1>UI Testing</h1><p>Previously I posted about my 2.0 update, and today I plan on updating to 2.0.3. I‚Äôm still a lone-wolf app developer in my company, and I have now taken the task to push updates every 2 to 3 weeks. These updates can be anything from features to patches and bug squashing.</p><p>To update this often, and to be the only developer I need to make sure everything I give to the testers pass some sort of quality control. I need something repeatable consistent and quick to test that the builds I ship work. That new features and fixes don‚Äôt mess something up in some other part of my apps.</p><p>Enter UI testing! üòÅ This post won‚Äôt be about Flutter in particular, but why I think UI testing is crucial for my work, and the result from implementing them.</p><p>Well, I lied ü§•, I need to mention Flutter. To do my testing, I use <a href="https://flutter.dev/docs/cookbook/testing/integration/introduction">flutter_driver</a>. Flutter driver starts the app in a simulator, or on a device. And it works it‚Äôs way trough your instructions and actually behaves like a user. It taps the screen, scrolls goes back like a user would.</p><p>So I have implemented scripts in my applications that navigates trough all my normal workflows in the apps. I can watch it zoom üèé trough the app, reporting crashes and successes so I can act on them. I also love how it looks!üòé</p><img src="https://cdn-images-1.medium.com/max/2000/1*DkBIyVW1Jy0BSflvsf735Q.gif" alt="flutter_driver zooms trough some base functionality"/><p>As you can see, the flutter_driver actually runs the app. Inputs login info, log in a user, waits for data to load and then starts to act on it. This is not all my tests, in total it runs for around 30seconds to a minute. I don‚Äôt mock any of my api-calls, I would rather like it to take longer, then to keep updating my mock data as the api changes. It also makes it easier for me, if one of the testers get some issues. If they want to give me some credentials, I can run trough the whole app as them, making it way easier to find the real issue of bug they encountered.</p><p>Before I start the process of a new build, I always run trough these tests. The result I have observed over the last couple of weeks where I‚Äôve been doing this is: Fewer crash-reports in <a href="https://sentry.io/welcome/">sentry</a>, fewer bugs reported by the testers, and increased satisfaction from the testers that they don‚Äôt encounter the red screen of death the Flutter can produce.</p><p>So I see only positivities in doing UI testing. I find bugs üêõ easier, I have a good way to replicate issues and I can provide more stable builds to my testers, that again provide a better app for the users!</p><img src="https://cdn-images-1.medium.com/max/2000/1*-YNKSjUGMrua3IOT-J7P0g.png" alt="The famous ‚Äúred screen of death‚Äù produced by Flutter"/><p>Now you might think üí≠: ‚ÄúThis must have taken a while to implement!‚Äù.</p><p>I can then surprise you by saying that Chemical Manager (the biggest of my apps) took me around 7 hours. 7 hours to write all my tests and test them üòÖ This is an app with an authentication flow, multiple fetches, caching of network calls, and 14 unique screens (some are used multiple times).</p><p>I think it is well worth doing, it saves me time. I don‚Äôt have to release as many patches to my testers, since I catch critical bugs at an earlier stage.</p><p>It is still very important to test the app with testers, and real devices. Testers have the amazing ability to encounter some wonderful edge cases you didn't think of! But they do like to test something that is somewhat stable, and they like to test the new feature they are supposed to test. Not to have the authentication flow fail on them, because you forgot you moved a login controller, or the like üòÖ (yes, I did that‚Ä¶ I tried to be smart, and did not test it).</p><p>I hope you found this useful, go write some UI tests, be it for web, Swift/obj-c, Java/Kotlin, React Native or flutter. There is frameworks that does what flutter_driver does for all of them üòÑ Good luck! üçÄ You will thank yourself for doing it, and so will your users üòä</p>]]></content:encoded></item><item><guid isPermaLink="true">https://brurberg.dev/articles/EcoOnline%20mobile%20apps%2020</guid><title>EcoOnline mobile apps 2.0</title><description>A description of my first post.</description><link>https://brurberg.dev/articles/EcoOnline%20mobile%20apps%2020</link><pubDate>Tue, 15 Oct 2019 00:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>EcoOnline mobile apps 2.0</h1><p>In the end of april in 2018, I published this article Building <a href="https://blog.expo.io/building-eco-archive-a-chemical-inventory-app-built-with-expo-eb0708c31cc8">Eco Archive, a chemical safety app, with Expo</a>. Today (15.October.2019) I released not one but two 2.0.0 updates to Google Play and the Apple App Store. One of them is a complete rewrite of the Eco Archive app mentioned above.)</p><h2>Rebranding</h2><p>First things first. It‚Äôs not Eco Archive anymore, it is Chemical Manager, and that new name is a renaming done by the company I work for üòÅ</p><p>But that new name did not come alone. We also got a new colour palette! üé® This happened this spring, and is one of the reasons I did a rewrite.</p><iframe src="https://medium.com/media/e41a74370aa087a2d98f57807cc19e1b" frameborder=0></iframe><h2>The reason(s)</h2><p>So why did I do a rewrite, and not a simple update to my existing code? Well, I was initially working on another project and I was working on it with my senior partner. He handed me some tasks, and after getting a long way on those tasks, it became apparent that those tasks relied upon other tasks that where still being worked on by my senior or other team members. This resulted in me having to wait to finish my task until those dependencies where done. ‚úÖ</p><p>I had also been looking üëÄ at Flutter for a while, and now I had a excuse to play with it. I mean, I could try to learn something new while waiting right?</p><p>So I went straight ahead and built an authentication flow, a list to view products and a products detail screen. And I tested it with the worst case scenario we have available, and my proof of concept (POC) handled it like a champ üèÖ. I then expanded on my POC, and tried to add persistence to the data, and store it offline. For those that are curious this accumulates to something around 300MB of data consisting of over 120 000 rows of data. I reached out to the Flutter community Discord and asked if anybody had any recommendations for achieving this. A pretty <a href="https://medium.com/@lukepighetti">cool dude named Luke Pighetti</a> said I should look into <a href="https://pub.dev/packages/sqflite">SQFLite</a> and after tweaking that I got it to work very well with my dataset.</p><p>This working well was critical, this is something we were not able to do with React Native with Expo at the time, since we had to use a local database of some sort. This differs React Native with Expo from Flutter, with Flutter I can use more of the native platform, but still get a way better developer experience then what I get from React Native by it self.</p><p>So now, with only the persistence of the product-list, I had something that was better then what our customers had.</p><h2>Summer</h2><p>The original project I was working on went into holiday-mode. My team took out their vacations, but I saved mine for later. I was still missing some dependencies for my original tasks, so I grabbed the chance and ran with it, I worked as much as I could on the app so I had something cool to show my colleagues when they got back. And guess what, they loved it!</p><iframe src="https://medium.com/media/f6840ec4e7a86757add7da15497a6515" frameborder=0></iframe><p>I could now put in even more hours into it, and so I did. I got the fantastic products-team to take a look at it, and they were amazed by what I had done over the summer. They found some bugs and missing features. Over august and September I‚Äôve been iterating. Fixing bugs and added those missing features. But I also developed several new features that we could not do with React Native and Expo.</p><h2>Anywhere</h2><p>My first breakthrough was the ability to persist everything. And we also have a module to our Chemical Manager product that enables users with a certain license the ability to download documents related to a product and to view them when completely offline. To do this, I first tried to use a public package that downloads files from a given url. I had some issues with that approach watching the progress of the download tasks did not work as expected, so in good fashion I created my own download package üì¶ . It gives me some useful streams, one for the queue, one for all downloaded tasks and one for all failed downloads.</p><h2>Packages</h2><p>This transitions over nicely to what I did very different this time around. Last time around we developed one package to rule them all. This package did authentication, fetching, some persistence, language and more. We planned to share this code between the web and the mobile app since both were built on JavaScript. In reality this did not work, the differences were too big between the APIs in the browser and React Native.</p><p>So in the 2.0.0 update I have rewritten all the business logic with Flutter in mind. Everything is now written in Dart, and this code is only meant to run on mobile. And I don‚Äôt have one package to rule them all either. I think of our apps more in terms of lego.</p><iframe src="https://medium.com/media/e831d372549517830cd6c8f2bcbb2120" frameborder=0></iframe><p>I have a lot of packages that work independently from each other. This approach allows us to develop apps with more modularity, and it‚Äôs easy to combine packages with different features to get unique combinations. We could do this before, but every app would then include everything, adding bloat.</p><p>This is also very useful, since EcoOnline is an ever growing company. I collaborate with a mobile dev in Ireland, they have their own app, also built on Flutter. But because I have built our packages like legos, they use our language system implemented trough my package üòÅ They also have plans to use the downloader package in the near future.</p><h2>Summary</h2><p>So these are all the changes to EcoOnline apps in 2019. A total rewrite with a new technology, started kind of like a under the table side project. That side project is now in production, and the reception have been very good!</p><p>For what we can see now, Flutter has given us more control to use native libraries and functionalities, while still having an amazing developer experience. We have also learned that legos are cool, and the concept of legos work very well when you want to share code between products and departments in a company.</p><p>And lastly, if you are a customer, I hope you enjoy using this app (even though it is a very corporate app)! And going forward I have a plan to keep updating the new apps every two or three weeks. Squash bugs üêõ and keep implementing new features for you to use!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://brurberg.dev/articles/Working%20remotely%20Part%201</guid><title>Working remotely: Part 1</title><description>A description of my first post.</description><link>https://brurberg.dev/articles/Working%20remotely%20Part%201</link><pubDate>Mon, 30 Sep 2019 00:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>Working remotely: Part 1</h1><p>The first of september this year, my girlfriend and I moved. We bought a house in the town of Oppdal, and moved there from T√∏nsberg. T√∏nsberg hosts the main offices for EcoOnline, the company I work for, and you might have guessed it: They don‚Äôt have any offices in OppdalüòÖ Or, as a matter of fact, they have one small 9m2 cell in a building there now. This is my office. It is in a building with more offices, mostly for remote workers or locals with small businesses. And now, I am one of those remote workers.</p><p>I‚Äôve been a remote worker for about a month now, and already I have some experiences I‚Äôd like to share. This could be useful information for other fresh remote workers, and for people working with remote resources.</p><p>I know other people have talked about this, but I feel it‚Äôs still very valid. Communication, one simple thing humans do every day is actually the hardest. I feel the thing that makes this hard is that you can‚Äôt just drop by someone on the way to the coffee machine. I have to relay on tools like slack, teams, iMessage and email. And I have to change it up to where I think the receiver is most likely to see my message, and respond to it.</p><p>Another thing that is a thing to look out for is: Remember to take break! this week has been quite hectic for me. I arrive at the office at 0700 in the morning and I start working around 15 minutes after that. The next time I look at the watch its 1300 and I haven‚Äôt eaten lunch yet. Remember to watch the time and take breaks. This came more naturally for me when working at the office with my colleagues. We have a ping-pong table, you have the office banter and more distractions. This might not be good for productivity, but it helps you to take breaks üòÖ</p><p>Also to help with the break part. If you are like me, when you solve a problem you just kind of forget that if you find yourself stuck on another problem an hour later. And you feel like you can‚Äôt take a break now because you ¬´haven‚Äôt done anything today!¬ª. I just forget about those 10 other things I‚Äôve done trough out the day. So to battle this, I‚Äôm using a journal. When I solve an issue, fix a bug finish a section in a course; I jot it down into the bullet-list for the day. I create a new list for each day, and this really helps! If I feel like I haven‚Äôt done anything, I just take a glance at my list and I can quickly remind myself of the other things I‚Äôve done.</p><p>Lastly; Should you work remotely? Well, I can‚Äôt really answer that, but you can! You know with yourself if you can work alone. I know I can, I show up at the office at 0700 and leave somewhere between 15‚Äì1600. I do have the self discipline to get work done without anyone ¬´watching¬ª me. If you‚Äôre not sure about yourself, I guess you could try to work from home a couple of days and see what you can get done.</p><p>At last‚Ä¶ I promise this time. As mentioned I do work in an office. I think this is very different from working from home. I have to get up in the moring, get dressed and get to the office, and when I leave the office I leave the work at the office. I‚Äôve talked to people working from home, and this is a hard part for them. They don‚Äôt have to get dressed in the morning and work is so close to your personal life. It‚Äôs easier to work for longer into the evening on a problem since work is home, and home is work. With having an actual office, I have created a sort of barrier between work and free time.</p><p>I think this will be a multipart series, and if so this will be part 1.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://brurberg.dev/articles/SwiftUI%20and%20Swift%20Package%20Manager%20Combine%20Now%20with%20Singletons</guid><title>SwiftUI and Swift Package Manager: Combine! Now with Singletons</title><description>A description of my first post.</description><link>https://brurberg.dev/articles/SwiftUI%20and%20Swift%20Package%20Manager%20Combine%20Now%20with%20Singletons</link><pubDate>Fri, 21 Jun 2019 00:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>SwiftUI and Swift Package Manager: Combine! Now with Singletons</h1><p>I want to build upon previous post. This is where we got to:</p><script src="https://gist.github.com/brorhb/32285a3b84147f5a4c8467988f74f927.js" charset="utf-8"></script><p>‚¨ÜÔ∏èThis is the core of the package, and this is my SwiftUI code ‚¨áÔ∏è</p><script src="https://gist.github.com/brorhb/498f97e3dfe5d9fda03dae081154aa41.js" charset="utf-8"></script><p>Cool right! We can now return a phrase from our language package and show it‚Äôs value in a Text view üòÅ</p><p>What‚Äôs not so great about this is that if I want to access the language package deeper down in my view hierarchy I‚Äôm out of luck. If I want to do that, I need to create a new instance of the Language class, and I dont want to do that, since this would require me to do another fetch and a new loading process and the like. It would work, but it would be slow which is not what we are after ü§®</p><p>So what do we do now? Insert <a href="https://en.wikipedia.org/wiki/Singleton_pattern">Singletons</a>! I bet there are other ways to do this, but this is what I did.</p><p>So how do we do this? Well, we need our singleton, and this is how I did it</p><script src="https://gist.github.com/brorhb/c58f58338eba0aecd04da0ff66feeb84.js" charset="utf-8"></script><p>There is almost nothing to it‚Ä¶ You just need to declare a public var/let that can take an instance of Language.</p><p>Now we want to use this of course. And this requires some minor changes to our ContentView.swift file, and we want to create a new SwiftUI view as a child üë∂ :</p><script src="https://gist.github.com/brorhb/9cc12dafdbaf520b335e6c4ef7cc2d56.js" charset="utf-8"></script><p>We now use the public variable containing our singleton as the @ObjectBinding variable. But we still need to fetch somewhere, so let‚Äôs just to it here üòÑ</p><p>Now to the child view:</p><script src="https://gist.github.com/brorhb/2a1fa740e7d9b24d9277b91c820e4d62.js" charset="utf-8"></script><p>This is pretty much a replica of our old ContentView.swift file. But the well trained eye üëÅ will see that we don't call the fetch method! This is because the parent did it, so we don‚Äôt need to do it again üòÑ But we could still access all the variables and methods of the class üòÅ</p><p>Thanks for reading üôè</p><p>This is how it looks like for me ‚ò∫Ô∏è I got some different naming, and my getPhrase needs more params but the rest is the same üòÑ</p><img src="https://cdn-images-1.medium.com/max/7240/1*976NOPwe0_05GN1jIJor4g.gif"/>]]></content:encoded></item><item><guid isPermaLink="true">https://brurberg.dev/articles/SwiftUI%20and%20Swift%20Package%20Manager%20Combine</guid><title>SwiftUI and Swift Package Manager: Combine!</title><description>A description of my first post.</description><link>https://brurberg.dev/articles/SwiftUI%20and%20Swift%20Package%20Manager%20Combine</link><pubDate>Wed, 19 Jun 2019 00:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>SwiftUI and Swift Package Manager: Combine!</h1><p>So, now it's been almost two weeks since WWDC, and we are currently on the second iteration on betas. Today I got the opportunity to experiment with a lot of stuff I don't know too much about: SwiftUI, Combine, Swift Package Manager and Swift. I have played around with Swift before, but I don‚Äôt use it often enough to feel comfortable with it. So I figured I should try it all‚Ä¶ My feelings going in: ‚ÄúI have no idea what I‚Äôm doing‚Äù</p><img src="https://cdn-images-1.medium.com/max/2008/1*7N_pMAomi-v06ZW4-NAqNA.jpeg" alt="My feelings going into this"/><p>So what am I doing? So, as I‚Äôve mentioned in an earlier post: I‚Äôve made created a package with Dart and Flutter that provides core functionality and business logic specific for my company. Making app development easier since you don't have to write models, fetch, authentication and the like again and again for each app. One small part of this package is the hookups to our central language system. So I wanted to recreate this language part with Swift, and make it available to other internal developers as a Swift Packageüì¶ I also wanted to prove to my self that Dart and Flutter skills do indeed transfer somewhat over to SwiftUI skills.</p><p>So where to begin. I needed to install the macOS Catalina beta (<a href="https://medium.com/@martinlasek/install-macos-catalina-xcode-11-beta-4701b6e3a296">I did it following this guide</a>) then Xcode 11 beta. When I finished this process I was ready. I created a new project ‚ÄúFile -&gt; New -&gt; Swift Package‚Äù Swift Package is new to Xcode 11, and Apple have integrated Swift Package Manager into Xcode. This gives you a package project to work with with tests. Then I had to write my structs for handling the JSON data from my API, and then a simple parser function:</p><script src="https://gist.github.com/brorhb/ca4d36f40c2c443d502495af63f2eb87.js"></script><p>Pretty cool üòé Or, it's cool to me‚Ä¶ If you know Swift this is probably not impressive. Now you can parse JSON into a struct as long it‚Äôs a one to one with the struct.</p><p>let myListOfItems: [Item] = parser(json)</p><p>Now I needed to figure out what to do with this data. I needed to make it available to other classes, and somehow notify other classes when this class gets some data.</p><p>import Combine import SwiftUI</p><p>Pretty much the answer. I needed to make my class conform to BindableObject and have some variable to notify listeners when the class is ready. I don‚Äôt know if I‚Äôve done this the right way, but it works.</p><script src="https://gist.github.com/brorhb/dff0cd2d35736a6a7338bca5bef2d750.js"></script><p>This is pretty much what happens. There is more going on, but that is specific for my use-case and don‚Äôt serve to much a purpose here üòÖ</p><p>Now after writing this, I was ready to test it within a separate SwiftUI project. I created my SwiftUI project, and added the package. I struggled way to much with this step, and I could not find much information about this either.</p><p>So this is how I did it. It‚Äôs pretty simple, but I did not know how to it</p><ol><li>Drag the folder of the package into the project (It should be at the same level as the ContentView.swift file in a new SwiftUI project)</li></ol><ol start="2"><li>Open the settings pane where you set display name, Bundle Identifier, Deployment info and the like. Scroll down to ‚ÄúFrameworks, Libraries and Embedded Content‚Äù. Click the plus button</li></ol><ol start="3"><li>At the top of the list that is now reviled you can hopefully see you package, maybe you need to scroll, I did not need to but YMMV.</li></ol><ol start="4"><li>Click little library icon looking kind of like this: üèõ</li></ol><ol start="5"><li>Click Add</li></ol><p>Now you can import the classes of you package üòÅ</p><p>At this point I discovered that Xcode did not see my classes. I quickly learned that anything you want to expose to you app, needs to be public. I don't know if this is the right way to do it, but it works‚Ä¶ Will update if I learn something new on this.</p><p>So I needed to update my package</p><script src="https://gist.github.com/brorhb/32285a3b84147f5a4c8467988f74f927.js" charset="utf-8"></script><p>Note that I also needed to make the Phrase struct public.</p><p>Now I you can use the package like this!</p><script src="https://gist.github.com/brorhb/498f97e3dfe5d9fda03dae081154aa41.js" charset="utf-8"></script><p>Now stuff works! And what a joy üôå</p><p>But‚Ä¶ I got an error, or not an error but a purple looking warning ‚ö†Ô∏è Telling me something about not triggering UI updates on a background thread. This is easy to fix. Although I‚Äôm not yet sure this is the best way to handle this:</p><p>In the package, change this:</p><p>public var state: LoadingState = .loading { didSet { didChange.send(self) } }</p><p>into this:</p><p>public var state: LoadingState = .loading { didSet { DispatchQueue.main.async { self.didChange.send(self) } } }</p><p>Now it works!</p><p>And I at least have learned a lot! And what a wonderful feeling to get this to work üòÅ The hardest part were that there is basically no tutorials on this yet, so I had to learn from the documentation, experimentation and trying to understand the errors Xcode threw at me. But I‚Äôm happy with the outcome.</p><p>I have since implemented a getPhrase method that returns a single phrase as a string based on some id. I‚Äôm super happy with todays work, and I want to do more SwiftUI development in the future üòÅ</p>]]></content:encoded></item><item><guid isPermaLink="true">https://brurberg.dev/articles/platformdotios%20is%20your%20friend</guid><title>Platform.isIOS is your friend</title><description>A description of my first post.</description><link>https://brurberg.dev/articles/platformdotios%20is%20your%20friend</link><pubDate>Sat, 8 Jun 2019 00:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>Platform.isIOS is your friend</h1><p>Very recently I‚Äôve started to port a existing react native application to Flutter. It‚Äôs going really good and I‚Äôm very happy with the progress so far.</p><p>I just wanted to write a little bit about a new friend I‚Äôve gotten: Platform.isIOS.</p><p>This new friend hides out in a lot of widgets, and I‚Äôm glad I‚Äôve befriended him!</p><p>It started right at the beginning of the porting process. The react native app is a typical cross-platform application. It shares basically the same UI cross the board. Flutter kind of didn‚Äôt want me to do that. In the react native app, the bottom navigation bar is always at the bottom of the screen. And when I tried to port that to Flutter the Flutter/material package resisted. Simply because this is considered a bad UX by material guidelines</p><p>That‚Äôs fair. That‚Äôs Google‚Äôs guidelines for user interface designs. What trips me up is that I also build for iOS. And iOS follows the human interface guidelines, and Apple wants you to follow their guidelines. And I thinks that‚Äôs fair to.</p><p>My dilemma then was, I want to deliver what my users expect of an application. Including how they look and feel. So I needed to adopt both CupertinoApp and MaterialApp. The problem is that not all widgets are compatible with both of these classes, so I needed to check for what platform my code is running on, and render out different widgets.</p><p>I thought that this would be a pain. But honestly; it‚Äôs not. You just need to plan out what you need to separate out in different widgets. You also need to make some wrappers for some functionality. For example: in my lists, the users can usually tap a cell in the list. But for MaterialApp I want to use Inkwell, but I can‚Äôt use this in CupertinoApp. In CupertinoApp I need to use a GuestureDetector. So I created a widget that takes a child and a onTap function and passed it down to the correct wrapper based on the platform ‚úåÔ∏è</p><p>The result is a codebase that renders apps that follows the expected UI and UX for the end user. And yes, I have to write some UI multiple times, but honestly it‚Äôs not too bad. There still is a whole lot that works perfectly on both platforms without any custom code üòÑ</p>]]></content:encoded></item><item><guid isPermaLink="true">https://brurberg.dev/articles/wwdc-2019</guid><title>WWDC ‚Äî 2019</title><description>A description of my first post.</description><link>https://brurberg.dev/articles/wwdc-2019</link><pubDate>Wed, 5 Jun 2019 00:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>WWDC ‚Äî 2019</h1><p>Hello!</p><p>Now we are a couple of days into DUB DUB (WWDC) ‚Äî 2019. And one thing got me really exited (Like, I screamed ¬´YEEES!¬ª at the TV), and this on thing was not the Cheese grater Mac Pro, nor the new display; but it was SwiftUI.</p><img src="https://cdn-images-1.medium.com/max/2000/1*IlJXPYvG830zC6a_cyuPZg.jpeg" alt="I bet that Apple is totally in on the ¬´Cheese grater¬ª ‚Äî joke‚Ä¶."/><p><strong>SwiftUI</strong></p><p>What exites me about SwiftUI is that it reminds me a lot of another technology I love; Flutter.</p><p>So why is it so familiar? Well, SwiftUI is a declerative framework for development across the Apple platforms üçé</p><p>SwiftUI seems to be taking the approch I‚Äôve gotten used to with Vue.js, React Native and Flutter. Building UI‚Äôs with components, and combining them into bigger components and applications. But as I‚Äôve already said: SwiftUI reminds me alot of Flutter, so I will compare it somewhat to that.</p><p>And this example will show some those smiliarities:</p><p>Everything is a widget in Flutter. And to write a simple app with a stateless widget that fills the screen with ¬´Hello World!¬ª this is what you have to do.</p><img src="https://cdn-images-1.medium.com/max/4728/1*EqwGtKgqdCbV8pOq-mFosg.png"/><p>The focus here is App(), the code in MyApp() is there simply to make the screenshots more compareable.</p><p>This renders the following:</p><img src="https://cdn-images-1.medium.com/max/2180/1*GFN2hfsvOIna4EU86OAa8A.png"/><p>Pretty nice! That was not a lot of code üòÅ</p><p>So to SwiftUI. Hold on, this is gonna be quick‚Ä¶.</p><img src="https://cdn-images-1.medium.com/max/6048/1*oYHgcxuuM61U700iKdW9Dw.png"/><p>After you start a new project in Xcode and check the ¬´use SwiftUI¬ª box. This is what you get, and this renders to the following:</p><img src="https://cdn-images-1.medium.com/max/2180/1*wXR-gZC-sqqG7cdfbnk6zQ.png"/><p>Woah! That‚Äôs pretty similar, and still very little code! And, it sort of looks like the Dart code!</p><p>Well, I know there is a lot of differences between the two languages, but after playing around with SwiftUI I feel like SwiftUI and Flutter provide very similar feeling Developer Experiences. Focusing on rapid development with components (Widgets in Flutter, Views in SwiftUI), and both frameworks makes me feel good and powerful. I feel like I can do stuff quickly in both of them!</p><p>I will eagerly watch the different sessions on SwiftUI, and hopefully build something with it this autumn.</p><p>I think this is a sneek-peak into where mobile application development is going. And, I like it alot üòé</p><p>If you want to read more about this on a more technical level, I would like to recommend John Sundell‚Äôs articles over @ <a href="https://wwdcbysundell.com">wwdcbysundell</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://brurberg.dev/articles/I%20want%20Flutter%20to%20help%20my%20colleagues</guid><title>I want Flutter to help my colleagues</title><description>A description of my first post.</description><link>https://brurberg.dev/articles/I%20want%20Flutter%20to%20help%20my%20colleagues</link><pubDate>Mon, 25 Mar 2019 00:00:00 +0100</pubDate><content:encoded><![CDATA[<h1>I want Flutter to help my colleagues</h1><p>Once again it‚Äôs been a while. Since my last post, I‚Äôve worked a lot with Flutter and Dart. And I still really enjoy it. Since last time, I‚Äôve joined the Flutter community on Discord and Reddit, and this community is amazing. It is filled with amazing talented people, that like to help others when they are stuck on something. Even I have helped some people along the way, and I have learned so much from trying to solve other peoples problems.</p><p>But this post is not about the Flutter community. It‚Äôs about how I‚Äôve learned to use Flutter to build apps. This is a broad thing, so I will focus on one part. I‚Äôve built a package for work. The package is a demo for how we can have one Dart pacakage that copntains what is needed for a MVP app. This pacakage contains authentication functionallity along side fetching and posting data from our APIs.</p><p>The package is built using the BLoC pattern, and the library provide providers for each of the BLoCs. By using this package I was able to recreate one of our existing application in a day in less than 20kb of dart code. I just needed to write the UI code, since all the business logic for handlig authentication, authentication-state, fetching and storing data and the like is in the package. The result is a lightning fast application that is a good proof of concept of how we can use Flutter at work for rapid development.</p><p>The package it self have taken me around a full week at work to come this far. At this point I have made BLoCs for all our API-endpoints and the common actions. The one thing that have taken the most time, was writing out all the model classes for the API-responses.</p><p>And I‚Äôve learned a lot from doing this. The main thing; by doing app development, you‚Äôll become a fullstack developer. While making this, I‚Äôve written everything from UI-code to SQL for storing data for offline usage.</p><p>The cool thing about working with Dart and Flutter is that people have a lot of toughts on how to do stuff. But the technology is still so young that while there are many toughts, there is no definite answers to stuff. I have experienced this while trying to figure out the BLoC pattern. I have followed multiple blog-post, watched how the Flutter team does it on The Boring Flutter Development Show and how Stephen Grider does it in this Udemy course. I think I have adobted somthing inbetween, trying to tweak these approaches to fit my style.</p><p>As stated my BLoC inspired package exposes multiple BLoCs trough individual providers. Since each BLoC handels all functionallity for a API-endpoint. The BLoCs has multiple streams providing data for the UI. They also have some sinks, altough I mostly use sinks for APIs with less funtionallity. For endpoints with more functionallity I stray somewhat away from what is typical for the BLoC pattern where everything is streams, and I combine streams with some exposed methods. I‚Äôve used normal methods for large post operations, that takes a lot of params. I haven‚Äôt seen a good way to give hints to the developer of what a sink wants, but in a method I can expose such information easier.</p><p>For now I‚Äôm the only one using this package, but my goal is to make it easier for my colleages to make apps for our company. When they get an idea, I dont want them to struggle with model classes, fetching and parsing JSON, handle authentication and the like. I want to provide them something that gives them this. If they need to manipulate the data more, they can do it in their apps, but this package provide them with a good foundation.</p><p>Here is a proof of concept app in gif form using my package. The app is less then 20KB of Dart-code, and it‚Äôs only UI code. The rest is provided by the package (authentication and data).</p><img src="https://brurberg.dev/images/i-want-flutter-to-help-my-colleagues/poc.gif" alt="Proof of concept" height="500"/>]]></content:encoded></item><item><guid isPermaLink="true">https://brurberg.dev/articles/Flutter%20%E2%80%94%20I%20don%E2%80%99t%20hate%20it</guid><title>Flutter ‚Äî I don‚Äôt hate it</title><description>A description of my first post.</description><link>https://brurberg.dev/articles/Flutter%20%E2%80%94%20I%20don%E2%80%99t%20hate%20it</link><pubDate>Tue, 29 Jan 2019 00:00:00 +0100</pubDate><content:encoded><![CDATA[<h1>Flutter ‚Äî I don‚Äôt hate it</h1><p>In cross-platform mobile development, we have a couple of alternatives now. My main experience is with React Native, but over the last 4‚Äì5 days, I‚Äôve accumulated 17 hours of experience with Flutter (According to Toggl). My inspiration to look more into this technology came from researching Material design, and reading this Medium post.</p><p>After I got my inspiration, and got a new reason to look more at Flutter (Although I‚Äôve been lurking r/flutterDev for over a year). I checked out the Flutter roadmap for 2019, and I really liked the Flutter teams focus to mature the platform. This is why I haven't look to much at Flutter before: It‚Äôs a Google product, and while Googles support is good, I‚Äôve also seen how quick Google can be to kill off a product. By looking at the roadmap, it feels like the platform gets the attention it needs, this pushed me to try do something with it.</p><img src="https://brurberg.dev/images/flutter-i-dont-hate-it/curiosity.jpeg" alt="curiosity"/><p>So, to the project and reason. I revisited the first project I was a part of when I got my job. It‚Äôs a hybrid mobile application. It‚Äôs a HSEQ application, where the user quickly can view recent exposures to chemicals at work, or add a new exposure to the registry. The app consists of 5 screens, including a settings page and login-flow. It‚Äôs a small and not to advanced app, and it was a perfect project to use to learn a new technology. It has all the basics, a login-flow, fetch data from a REST-api, and view data from the results, and then post some data back to it.</p><p>Today, I finished a prototype of this app. It took me 17 hours as I‚Äôve stated earlier, that includes research and learning Dart2 and Flutter along the way. One of my colleagues asked me for my opinion of it, and he said I gave it really high praise by saying: ‚ÄúI dont hate it?‚Äù, and I guess that's true.</p><p>It did not take me to long to understand what was going on. The documentation is the best documentation I‚Äôve ever seen. The performance of the app is surprisingly good, even on slower devices, and it‚Äôs easy to create tasteful animations that help the user understand what‚Äôs going on.</p><img src="https://brurberg.dev/images/flutter-i-dont-hate-it/documentation.jpeg" alt="documentation"/><p>What‚Äô weird with Flutter for me, is that: It does not look like anything I‚Äôve worked with before, yet it feels familiar. It does not look like JavaScript to me, but it kind of feels like it.</p><img src="https://brurberg.dev/images/flutter-i-dont-hate-it/fry.jpeg" alt="feels like home"/><p>Flutter solves some of my gripes with JavaScript and React Native, and that is that Flutter and Dart is AOT-compiled. For what I‚Äôve experienced now; this means that performance seems smoother, and crashes happens more gracefully. If a fetch responds with something the code does not expect, the app does not go into ‚Äúred screen of death‚Äù, it just stays at the last place things worked and acts like nothing has happened. During development, this feels less infuriating, and keeping the app open if something goes wrong, is way better than throwing the user back to their homescreen all of a sudden.</p><p>Second, I‚Äôve mentioned the documentation Flutter have. It‚Äôs amazing, they even got a ‚ÄúFlutter for React Native devs‚Äù. It‚Äôs good idea, and it‚Äôs well executed. This section allowed to avoid Google-searches like ‚ÄúHow to send a prop to a class in flutter‚Äù; because the documentation have it‚Äôs own section for this!</p><p>What‚Äôs cool with Flutter is that it allows me to use my existing knowledge, and transfer it to Flutter relatively quickly. Flutter is easy to learn, and gives good performance.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://brurberg.dev/articles/First%20impressions%20of%20TypeScript%20(Honeymoon%20period)</guid><title>First impressions of TypeScript (Honeymoon period)</title><description>A description of my first post.</description><link>https://brurberg.dev/articles/First%20impressions%20of%20TypeScript%20(Honeymoon%20period)</link><pubDate>Mon, 21 Jan 2019 00:00:00 +0100</pubDate><content:encoded><![CDATA[<h1>First impressions of TypeScript (Honeymoon period)</h1><p>I‚Äôve been meaning to try TypeScript for awhile now, but I‚Äôve never gotten the opportunity until now. I got some time to work some more on the mobile application I made during my degree.</p><p>This project is perfect for trying out some new technology. I know the codebase, since I wrote it all. I have some metrics over errors coming for Sentry.io, and the project is written in React Native.</p><p>From Sentry I know that most of my errors that end in a fatal crash has its origin from some sort of <code>TypeError</code>. This combined with my new born passion for Swift pushed me into trying TypeScript. And so far I find it really useful in a couple of ways, even some unexpected ways too.</p><p>For starters, I hopefully have less TypeErrors now after switching some components. I‚Äôve started in the small, and my project supports both TypeScript and regular JavaScript. This way I can convert the project component by component. I am supposed to create a new feature, and this is the first component to receive the facelift. The next is my biggest list component, that is also spawning the most errors.</p><p>Most of the TypeErrors is starting to vanish, because of TypeScript interfaces. A interface describe what an Object should be including, and what types the attributes should be. I‚Äôve been creating interfaces for a couple of arrays of objects that I receive from an API. Creating the interface also lets my editor suggest my next dot-notation down in the object, shrinking the chance of a good‚Äôol typo. I‚Äôve also been able to single out a couple of data-points that have been moved in a newer version of the API, also fixing some minor problems for some users where some information did not show.</p><p>One unexpected positive thing note also releated to API stuff. Changes can happen alot on the API-side, especially on alpha and beta levels. My colleague recently asked me ‚ÄúWhat information from API X do you use?‚Äù, before it was kind of hard to tell him, I had to skim trough the code. After TypeScript, I know exactly what I use, where I use it and what I use it for. I did not foresee this outcome.</p><p>As a summary; I‚Äôm in my honeymoon period with TypeScript in combo with React Native. But as of now, I really like it! I get kind of the best of both worlds. As a lone mobile developer, I can develop fast for multiple platforms with React Native, and now I can develop a bit safer and with less errors although a little bit slower, because TypeScript challenges me to really think trough a feature or function in a way I did not before.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://brurberg.dev/articles/Learn%20it%20the%20hard%20way</guid><title>Learn it the hard way</title><description>A description of my first post.</description><link>https://brurberg.dev/articles/Learn%20it%20the%20hard%20way</link><pubDate>Wed, 21 Nov 2018 00:00:00 +0100</pubDate><content:encoded><![CDATA[<h1>Learn it the hard way</h1><p>In the beginning of this month, I enrolled in a Udemy course. It‚Äôs a iOS development course, focusing on Swift 4.2. So far I think it‚Äôs pretty good. The course is more aimed at new developers, without to much previous experience, but you‚Äôll get asked pretty early on about how much experience you have.</p><p>On this question I answered as honestly as I could (who are you fooling right? Only yourself). I answered something along the lines of: ‚ÄúI have been developing in other languages for more then a year, but been working with swift for less then 6 months‚Äù. I think this fit me pretty well, I‚Äôve studied Information Systems and IT-managment (Some classes focused more on coding then others) from 2015‚Äì2018 and now have a bachelors degree in that field. The summer of 2017 I started to work professionally as a frontend developer. I worked my way into Javascript using both React and Vue. January of 2018, I started my development of my first React Native app. And over the autumn I started to learn Swift.</p><p>So what is the point of all this. I wanted to lay out what my background, and my summary is: I‚Äôve touched multiple programming languages, I have some professional experience, and now I try to learn something new again. As I said, I like the Udemy course, the teacher is good, but I strongly disagree on my current lecture.</p><p>In the lecture I‚Äôm at, the teacher shows us how to do a http request, and how to deal with the response and what to do with the returned JSON. She‚Äôs using Alamofire to do deal with the request and uses SwiftyJSON to deal with the JSON. I personally know how a HTTP request works, and how to deal with the JSON in both Javascript and in Swift. One of the first things I wanted to learn in Swift was this process, I‚Äôve written <code>decodable structs</code> and classes to fetch and parse my data. It‚Äôs not too hard, but it‚Äôs harder than using these CocoaPods.</p><p>I think it‚Äôs always better to learn stuff the hard way the first time. In this course, I wish (not for my self, but fellow students) that the instructor did not use CocoaPods for this in the course. In my Javascript adventures, I were thrown into the deep end of the pool pretty early on. I had to learn to swim pretty quick, but it worked. I now can swim pretty well, my technique is not perfect (does it become perfect at any point? Probably not) but I get my tasks done.</p><p>I think it‚Äôs better to learn things the hard way, because you should know how stuff works behind the scenes. And you should really know how a fetch, and how to deal with JSON works. This is in my experience really basic knowledge, and almost every application out there uses it in some form or another. What I want to tell you is: You should learn the basics before you use a package or CocoaPod to do the work for you. When you know how to do a fetch and how to parse and use JSON, then use a CocoaPod for it, and by all means, use Alamofire and SwiftyJSON, these packages looks awesome!</p><p>To summarize, it‚Äôs nice to have an idea of how the wheel work before you use it.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://brurberg.dev/articles/First%20impressions%20of%20developing%20with%20Swift</guid><title>First impressions of developing with Swift</title><description>A description of my first post.</description><link>https://brurberg.dev/articles/First%20impressions%20of%20developing%20with%20Swift</link><pubDate>Tue, 6 Nov 2018 00:00:00 +0100</pubDate><content:encoded><![CDATA[<h1>First impressions of developing with Swift</h1><p>I‚Äôm late to the game, I‚Äôve been looking at Swift from a distance, lurking over at /r/swift watching the evolution of the language and the community. This autumn I decided I‚Äôd want to learn more of this language, in my previous post I went a bit into why.</p><p>Swift is now at 4.2, and I figured I could start my journey here. I have some experience from Xcode from previous endeavours, so navigating this application wasn't too hard. The one thing I do not like however with iOS development is the storyboards, I guess this is because I started out as a web-dev that transitioned into React Native. I like to write my UI, and did not think this was possible with Xcode. I think Apple wants you to use storyboards because; I guess it's easier for newcomers to programming? I stumbled opon a YouTube channel ‚ÄúLets Build That App‚Äù, and learned that this guy writes out his UI in code! When I realised this, I went out and found a project I could do.</p><p>I use sentry.io to track bugs in projects, but to my knowledge Sentry does not provide a mobile application. They do however provide API‚Äôs, and rather good ones at that with good documentation. My starting project would be to build an app that lets you login with a Sentry token, fetch projects and fetch issues related to those projects. The app would not be pretty, I just wanted to build an app that covered a lot of basic functionality (login flow, tableviews, custom cells, fetch from http requests and persisting data). Following a couple of tutorials on programmatic UI with Swift, I was able to complete this project in a couple of nights.</p><ul><li><a href="https://softauthor.com/ios-uitableview-programmatically-in-swift">UITableView programmatic</a></li></ul><ul><li><a href="https://www.youtube.com/watch?v=1hCwOIgjLBA">Auto Layout Constraints</a></li></ul><p>These two tutorials stood out to me, and became important for my app. The rest of the app I just Googled my issue or searched around the documentation built into Xcode.</p><p>My experience building this app was awesomeüòé. I now really like Swift, it's fun and I figured I could work really well with this tool. The documentation built into Xcode is so much better than anything I‚Äôve experienced earlier in my web projects.</p><p>Coming from Javascript the thing I think I like the most in Swift is the type safety. If I try to do something too weird, Xcode will complain and for most of the time give useful feedback to me as a dev. It feels good to not be able to change variables type on a whim, you have to think more about how you want to tackle a problem, and I mean this in a good way. I would say my code feels better in Swift. I find it easy to read, and I find it more reusable since I‚Äôm forced to write my code more general.</p><p>Also, on a general note. Working with another language feels nice and fresh. It breaks my usual pattern, and keeps me sharp. From now on, I will try to put in an hour a day dedicated to learn all about Swift and iOS development. Guess I‚Äôll write more about further findings in the future.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://brurberg.dev/articles/two%20cents%20on%20app%20development</guid><title>My two cents on mobile development</title><description>A description of my first post.</description><link>https://brurberg.dev/articles/two%20cents%20on%20app%20development</link><pubDate>Mon, 29 Oct 2018 00:00:00 +0100</pubDate><content:encoded><![CDATA[<h1>My two cents on mobile development</h1><p>The winter and spring of 2018 I wrote an app for work. You can read about my experience here. The app was developed with the help of React Native, it had a nice learning curve and I could be fairly quick on iterations. For those of you who don‚Äôt know what React Native is, the TL;DR is: A framework written by facebook, to write JavaScript using the JSX syntax to write native apps.</p><p>My initial experience was good, I could work fast and was able to do it alone. I had some experience with Javascript, since I had been working with it professionally the last 8 months. This was the reason I choose React Native to begin with. I had some experience with React and Javascript, so React Native felt like the natural step towards native development.</p><p>I had one anternaltive to React Native, and that would be Cordova. Cordova is a wrapper for a web application, so that it can be installed on a device and run like a native app. My issue with Cordova apps is: You will never get a good native feel, you can do a lot, but the native feel will suffer at some point. The main benefit with Cordova is; If you have a website that scale fine for mobile, you can now deliver it as an app.</p><p>I like the idea of React Native, you can write web-like code, and share a lot of business logic. React Native makes a lot of sense for a lot of people because of this. The quick development mentioned earlier is also a major benefit. But something has changed for me, and seemingly for a lot of other people on /r/reactnative. The reasons I abandoned hybrid apps for react native is starting to show themselves again.</p><p>The main issue I have with react native at the moment is: Updating usually breaks a lot of unexpected functions in my apps. Dependencies gets abandoned or the documentation is out of date even if its 2 weeks old. I guess this is not mainly a React Native problem, but more of a modern javascript problem. Javascript and the javascript community is moving so fast, its amazing to watch, but can be a pain to experience.</p><p>Recently I dipped my toes into native mobile development. Yeah, I know react native is also native, but now I‚Äôm talking swift. After working on a side project for a couple of weeks, I see I enjoy swift more. Yes its slower to develop, I dont have hot reloading and other niceties of React Native development, but still it feels better to me as a developer. I feel the developer experience is better with Swift then with React Native.</p><p>I read the Crisp.chat blog post, and it dawned on me. Im not alone in feeling this. I‚Äôve tried to avoid Native languages, and get the quick wins. I still think this is the way to go for many people, but now I want to look more into iOS and Swift. It seems like it is the way to go for me. When reading the article by Crisp, I ignore the numbers of downloads and increase of users, what I do find interesting is the ‚Äútime spent in app‚Äù numbers. They are growing with ‚Äútech upgrades‚Äù.</p><p>This autumn I attended React Native EU. It was an amazing experience and I learned a lot. I also talked to other developers, and we talked about what we thought was the future of react native. We all were comforted by the conference, there were a lot of attendees and high quality talkers. But we all agreed that we think React Native is like any other Javascript framework, and we agreed that React Native probably has around 5 years to live since it took off.</p><p>And approaching React Native like a Javascript framework makes sense. When using a Javascript framework its a smart idea to have a pretty good understanding of plain JS too. That way you can understand whats going on in the background, and what the framework is capable of and not. This is why I‚Äôm looking more into Swift and iOS development, I want to understand what React Native is trying to accomplish, and to know what to do the day React Native gets abandoned like other JS frameworks before it.</p><p>For myself I also learn Swift to stay viable in the future. React Native will probably not live forever, and not as long as Swift. Swift is Apples programming language, and we see it more and more on other platforms as well. And I would guess that Swift will stay around in some form for longer than React Native.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://brurberg.dev/articles/building%20eco%20archive</guid><title>Building Eco Archive, a chemical safety app, with Expo</title><description>A description of my first post.</description><link>https://brurberg.dev/articles/building%20eco%20archive</link><pubDate>Fri, 27 Apr 2018 00:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>Building Eco Archive, a chemical safety app, with Expo</h1><p>Hello, my name is Bror. I just landed a contract with a company called EcoOnline (in T√∏nsberg, Norway) as a junior developer. EcoOnline is an IT company dedicated to develop software to improve and simplify chemical safety. Eco Archive is the mobile adaptation of the web app, intended to make information about different chemicals easily accessible for employees in different companies. This is the story on how this app came to life, and the journey I had developing it.</p><h2>How it started</h2><p>Last summer and autumn, I was working as a trainee at EcoOnline. I would recommend all aspiring developers to get an internship while you take a degree (YMMV), which is what I did. But back to the story. We were initiating a new project in autumn to revamp the user experience of our platform (amongst other things), which included refreshing our old mobile app for our existing customers. I got the responsibility for the mobile app, and this became my bachelors degree for my final year of university. The task was to refresh the old app in any way I wanted. Make it user-friendly, explore new technologies, learn, and get it done by the end of Q1 of 2018.</p><h2>The old app</h2><img src="https://brurberg.dev/images/building-eco-archive/everywhere.png" alt="JQuery everywhere"/><p>Enough said‚Ä¶</p><h2>The story of the new app</h2><p>When starting the development of the new app, I didn‚Äôt want any connections to the old app, other than the name. (I couldn‚Äôt choose the name, or else I would have thought of some clever hipstery name: something like‚Ä¶Ecotron!) When I started university, I wanted to be a mobile developer. This was my motivation and my goal. I had zero experience prior to uni, and my best skills were located in web development. During the last year, I‚Äôd accumulated some skills with both React and Vue.</p><h3>Hybrid efforts</h3><p>Since my latest project included Vue.js, I started mocking up and prototyping the app with Cordova and Vue. About one month in, I realized the shortcomings of these hybrid apps. I just could not get a native feel to the app, but now at the end of January, I didn‚Äôt have the time to look into pure native stuff like Swift and Java/Kotlin. I certainly didn‚Äôt have the time to make two codebases.</p><h3>React Native over Hybrid</h3><p>I‚Äôd heard of React Native, and I had some skills and proficiency with React. I started to look into it, and over the weekend I had made a quick little proof-of-concept, using React Native and Expo. Monday morning, I took my prototype made with Vue and Cordova, booted it up on the simulator, opened Hyper, and typed in exp init EcotronNative (Yes, I used this cheesy name üêù). I started rebuilding the Cordova app into a React Native app using Expo. This was in the last days of January, and I had only through March to finish üò∞.</p><h3>Working with Expo</h3><p>I had about two months to finish this app (read: implement features and get it ready for testing, though some external pushback got the release postponed to end of April). I wanted to have the app in a release-ready state by the end of March, so that the last weeks could be devoted to quality control. I want to praise Expo for the work they have done! I don‚Äôt think I could have done it without Expo. All my data came from our own APIs, so my job was to present it in a clever way. I realized I wouldn‚Äôt need any other external packages or APIs that Expo doesn‚Äôt yet provide. The Expo documentation is great, and is miles ahead of the React Native documentation that can be outdated or simply missing. The Expo docs have good examples with great value. It‚Äôs a good way to see real-world examples of what you want to achieve, and how to implement them. Within a couple of weeks I had the critical functionality done, and the app just felt so much better than the hybrid!</p><img src="https://brurberg.dev/images/building-eco-archive/app.png" alt="Overview of the EcoArchive app"/><p>Overview of the EcoArchive app</p><h3>How I released production builds and betas</h3><p>During the development period, I got some bad news: due to new limitations on Expo‚Äôs iOS client, I had to resort to TestFlight. But given the nature of how Expo serves the build.js, I needed to differentiate a beta and a production build. And this is the time I realized Expo has a release channel functionality, so now, all my production builds are built using:</p><pre><code>exp build:android --release-channel prod &amp;&amp; exp build:ios --release-channel prod
</code></pre><p>And all my beta builds using:</p><pre><code>exp build:ios --release-channel beta &amp;&amp; exp build:android --release-channel beta
</code></pre><p>The versioning is done by GitHub, so when I want to make a build, I branch out from master to freeze a state of the project, and run a beta build. This is distributed to my testers, and potential fixes are applied to the branch, and redistributed by running exp publish --release-channel beta. When the testers give me the go-ahead, I run the production commands, and publish this build. The changes made to the branch are now pulled back into the master branch, and I can continue the work on the next version.</p><h2>Summary</h2><p>Working with React Native and Expo has been a fun experience. I‚Äôve learned a lot, and my workplace now has a new app on the App Store and Google Play. And now I just need to write my report for my degree. I‚Äôm looking forward to the summer when I‚Äôm done with school and can work full time as a junior at EcoOnline and be their ¬´app-guy¬ª. I will continue using Expo, and can‚Äôt wait to hear their talk at React Native EU 2018 in Poland. I‚Äôll be there, and I hope people reading this will too! Also thanks to the team around me, providing awesome APIs, and thanks to my mentor for teaching me everything I know!</p>]]></content:encoded></item></channel></rss>